import { Directive, ElementRef, Inject, forwardRef, Host, HostListener, Attribute, Input, Output, ContentChild, Component, NgZone, NgModule } from '@angular/core';
import { Observable, BehaviorSubject, of, Subject } from 'rxjs';
import { skip, first, filter, takeUntil } from 'rxjs/operators';
import { DOCUMENT, CommonModule } from '@angular/common';
import { NgWormholeModule } from 'ng-wormhole';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AngularDropdownControlDirective {
    /**
     * @param {?} dropdown
     * @param {?} element
     */
    constructor(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.stopPropagation();
        if (!this.dropdown.disabled) {
            this.dropdown.toggle();
        }
    }
}
AngularDropdownControlDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ng-dropdown-control],[ngDropdownControl]',
                host: {
                    '[attr.aria-haspopup]': 'true',
                    '[attr.aria-controls]': 'dropdown.id',
                    '[attr.aria-expanded]': 'dropdown.isOpen',
                    '[class.ng-dropdown-control]': 'true',
                    '[class.active]': 'dropdown.isOpen'
                }
            },] }
];
AngularDropdownControlDirective.ctorParameters = () => [
    { type: AngularDropdownDirective, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => AngularDropdownDirective),] }] },
    { type: ElementRef }
];
AngularDropdownControlDirective.propDecorators = {
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @param {?} callback
 * @return {?}
 */
function waitForAnimation(element, callback) {
    if (element === null) {
        return;
    }
    requestAnimationFrame(() => {
        /** @type {?} */
        const computedStyle = window.getComputedStyle(element);
        if (computedStyle.animationName !== 'none' &&
            computedStyle.animationPlayState === 'running') {
            return once(element, 'animationend', callback);
        }
        callback();
    });
}
/**
 * @param {?} element
 * @param {?} eventName
 * @param {?} listener
 * @return {?}
 */
function once(element, eventName, listener) {
    element.addEventListener(eventName, function listenOnce(e) {
        element.removeEventListener(eventName, listenOnce);
        return listener(e);
    });
}
/** @type {?} */
const closest = ((/** @type {?} */ (window))).Element && Element.prototype.closest
    ? (el, s) => el.closest(s)
    : function _closest(self, s) {
        /** @type {?} */
        const matches = (((/** @type {?} */ (self))).document || self.ownerDocument).querySelectorAll(s);
        /** @type {?} */
        let i;
        /** @type {?} */
        let el = self;
        do {
            i = matches.length;
            while (--i >= 0 && matches.item(i) !== el) { }
        } while (i < 0 && (el = el.parentElement));
        return el;
    };
/**
 * @param {?} trigger
 * @param {?} dropdown
 * @param {?} __2
 * @return {?}
 */
function calculatePosition(trigger, dropdown, { horizontalPosition, verticalPosition, matchTriggerWidth, previousHorizontalPosition, previousVerticalPosition }) {
    // Collect information about all the involved DOM elements
    /** @type {?} */
    const scroll = { left: window.pageXOffset, top: window.pageYOffset };
    const { left: triggerLeft, top: triggerTop, width: triggerWidth, height: triggerHeight } = trigger.getBoundingClientRect();
    let { height: dropdownHeight, width: dropdownWidth } = dropdown.getBoundingClientRect();
    /** @type {?} */
    const viewportWidth = window.innerWidth;
    /** @type {?} */
    const style = {};
    // Calculate drop down width
    dropdownWidth = matchTriggerWidth ? triggerWidth : dropdownWidth;
    if (matchTriggerWidth) {
        style.width = dropdownWidth;
    }
    // Calculate horizontal position
    /** @type {?} */
    const triggerLeftWithScroll = triggerLeft + scroll.left;
    if (horizontalPosition === 'auto') {
        // Calculate the number of visible horizontal pixels if we were to place the
        // dropdown on the left and right
        /** @type {?} */
        const leftVisible = Math.min(viewportWidth, triggerLeft + dropdownWidth) -
            Math.max(0, triggerLeft);
        /** @type {?} */
        const rightVisible = Math.min(viewportWidth, triggerLeft + triggerWidth) -
            Math.max(0, triggerLeft + triggerWidth - dropdownWidth);
        if (dropdownWidth > leftVisible && rightVisible > leftVisible) {
            // If the drop down won't fit left-aligned, and there is more space on the
            // right than on the left, then force right-aligned
            horizontalPosition = 'right';
        }
        else if (dropdownWidth > rightVisible && leftVisible > rightVisible) {
            // If the drop down won't fit right-aligned, and there is more space on
            // the left than on the right, then force left-aligned
            horizontalPosition = 'left';
        }
        else {
            // Keep same position as previous
            horizontalPosition = previousHorizontalPosition || 'left';
        }
    }
    if (horizontalPosition === 'right') {
        style.right = viewportWidth - (triggerLeftWithScroll + triggerWidth);
    }
    else if (horizontalPosition === 'center') {
        style.left = triggerLeftWithScroll + (triggerWidth - dropdownWidth) / 2;
    }
    else {
        style.left = triggerLeftWithScroll;
    }
    // Calculate vertical position
    /** @type {?} */
    const triggerTopWithScroll = triggerTop + scroll.top;
    if (verticalPosition === 'above') {
        style.top = triggerTopWithScroll - dropdownHeight;
    }
    else if (verticalPosition === 'below') {
        style.top = triggerTopWithScroll + triggerHeight;
    }
    else {
        /** @type {?} */
        const viewportBottom = scroll.top + self.window.innerHeight;
        /** @type {?} */
        const enoughRoomBelow = triggerTopWithScroll + triggerHeight + dropdownHeight < viewportBottom;
        /** @type {?} */
        const enoughRoomAbove = triggerTop > dropdownHeight;
        if (previousVerticalPosition === 'below' &&
            !enoughRoomBelow &&
            enoughRoomAbove) {
            verticalPosition = 'above';
        }
        else if (previousVerticalPosition === 'above' &&
            !enoughRoomAbove &&
            enoughRoomBelow) {
            verticalPosition = 'below';
        }
        else if (!previousVerticalPosition) {
            verticalPosition = enoughRoomBelow ? 'below' : 'above';
        }
        else {
            verticalPosition = previousVerticalPosition;
        }
        style.top =
            triggerTopWithScroll +
                (verticalPosition === 'below' ? triggerHeight : -dropdownHeight);
    }
    return { horizontalPosition, verticalPosition, style };
}
/**
 * @param {?} trigger
 * @param {?} dropdown
 * @param {?} __2
 * @return {?}
 */
function calculateInPlacePosition(trigger, dropdown, { horizontalPosition, verticalPosition }) {
    /** @type {?} */
    let dropdownRect;
    /** @type {?} */
    const positionData = {};
    if (horizontalPosition === 'auto') {
        /** @type {?} */
        const triggerRect = trigger.getBoundingClientRect();
        dropdownRect = dropdown.getBoundingClientRect();
        /** @type {?} */
        const viewportRight = window.pageXOffset + window.innerWidth;
        positionData.horizontalPosition =
            triggerRect.left + dropdownRect.width > viewportRight ? 'right' : 'left';
    }
    if (verticalPosition === 'above') {
        positionData.verticalPosition = verticalPosition;
        dropdownRect = dropdownRect || dropdown.getBoundingClientRect();
        positionData.style = { top: -dropdownRect.height };
    }
    return positionData;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
let _id = 1;
/**
 * @return {?}
 */
function generateDropdownId() {
    return _id++;
}
/** @type {?} */
const EmptyDropdownContentPosition = Object.freeze({
    vPosition: null,
    hPosition: null,
    top: null,
    left: null,
    bottom: null,
    right: null
});
class AngularDropdownDirective {
    /**
     * @param {?} document
     * @param {?=} id
     */
    constructor(document, id) {
        this.renderInPlace = false;
        this.control = null;
        this.previousVerticalPosition = null;
        this.previousHorizontalPosition = null;
        this.matchTriggerWidth = false;
        this._isOpen$ = new BehaviorSubject(false);
        this.isOpen$ = this._isOpen$.pipe(skip(1));
        this.position$ = new BehaviorSubject(EmptyDropdownContentPosition);
        this.calculatePosition = calculatePosition;
        this.calculateInPlacePosition = calculateInPlacePosition;
        this.disabled = false;
        this.beforeOpen = null;
        this.beforeClose = null;
        this.verticalPosition = 'auto';
        this.horizontalPosition = 'auto';
        this.onOpen = this.isOpen$.pipe(filter(open => open === true));
        this.onClose = this.isOpen$.pipe(filter(open => open === false));
        this.uniqueId = null;
        this.width = null;
        this.reposition = () => {
            if (!this._isOpen$.getValue()) {
                return null;
            }
            /** @type {?} */
            const dropdownElement = this.dropdownElement;
            if (!dropdownElement || !this.triggerElement) {
                return null;
            }
            /** @type {?} */
            const _calculatePosition = this.renderInPlace
                ? this.calculateInPlacePosition
                : this.calculatePosition;
            /** @type {?} */
            const options = {
                horizontalPosition: this.horizontalPosition,
                verticalPosition: this.verticalPosition,
                matchTriggerWidth: this.matchTriggerWidth,
                previousHorizontalPosition: this.previousHorizontalPosition,
                previousVerticalPosition: this.previousVerticalPosition
            };
            /** @type {?} */
            const positionData = _calculatePosition(this.triggerElement, dropdownElement, options);
            return this.applyReposition(this.triggerElement, dropdownElement, positionData);
        };
        this.document = document;
        this.initializeId(id);
        this.createDefaultWormholeOutlet();
    }
    /**
     * @return {?}
     */
    get dropdownId() {
        return `ng-dropdown-content-${this.uniqueId}`;
    }
    /**
     * @return {?}
     */
    get triggerElement() {
        return this.control && this.control.element.nativeElement;
    }
    /**
     * @return {?}
     */
    get dropdownElement() {
        return this.document.getElementById(this.dropdownId);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    ngOnChanges({ disabled }) {
        if (disabled &&
            disabled.firstChange === false &&
            disabled.currentValue === true &&
            disabled.previousValue !== true) {
            this.disable();
        }
    }
    /**
     * @return {?}
     */
    open() {
        if (this.disabled || this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        let open$ = of(true);
        if (this.beforeOpen) {
            /** @type {?} */
            const result = this.beforeOpen();
            open$ = result instanceof Observable ? result : of(result);
        }
        open$
            .pipe(first(), filter(open => open === true))
            .subscribe(() => this._isOpen$.next(true));
    }
    /**
     * @param {?=} skipFocus
     * @return {?}
     */
    close(skipFocus = false) {
        if (this.disabled || !this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        let close$ = of(true);
        if (this.beforeClose) {
            /** @type {?} */
            const result = this.beforeClose();
            close$ = result instanceof Observable ? result : of(result);
        }
        close$
            .pipe(first(), filter(close => close === true))
            .subscribe(() => {
            Object.assign(this, {
                hPosition: null,
                vPosition: null,
                top: null,
                right: null,
                bottom: null,
                left: null,
                width: null,
                previousVerticalPosition: null,
                previousHorizontalPosition: null
            });
            this._isOpen$.next(false);
            if (!skipFocus) {
                if (this.triggerElement instanceof HTMLElement &&
                    this.triggerElement.tabIndex > -1) {
                    this.triggerElement.focus();
                }
            }
        });
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this._isOpen$.getValue()) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    disable() {
        this.disabled = true;
        this.close();
    }
    /**
     * @return {?}
     */
    enable() {
        this.disabled = false;
    }
    /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} positions
     * @return {?}
     */
    applyReposition(trigger, dropdown, positions) {
        /** @type {?} */
        const changes = {
            hPosition: positions.horizontalPosition,
            vPosition: positions.verticalPosition
        };
        if (positions.style) {
            changes.top = `${positions.style.top}px`;
            // The component can be aligned from the right or from the left, but not from both.
            if (positions.style.left != null) {
                changes.left = `${positions.style.left}px`;
                changes.right = null;
            }
            else if (positions.style.right != null) {
                changes.right = `${positions.style.right}px`;
                changes.left = null;
            }
            if (positions.style.width != null) {
                changes.width = `${positions.style.width}px`;
            }
            if (this.position$.getValue().top == null) {
                // Bypass on the first reposition only to avoid flickering.
                Object.keys(positions.style).forEach(k => (dropdown.style[(/** @type {?} */ (k))] = positions.style[k]));
            }
        }
        this.position$.next(changes);
        this.previousHorizontalPosition = positions.horizontalPosition;
        this.previousVerticalPosition = positions.verticalPosition;
        return changes;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    initializeId(id) {
        if (id) {
            this.id = this.uniqueId = id;
        }
        else {
            this.uniqueId = generateDropdownId();
            this.id = `ng-dropdown-${this.uniqueId}`;
        }
    }
    /**
     * @return {?}
     */
    createDefaultWormholeOutlet() {
        if (!this.document.getElementById('ng-dropdown-outlet')) {
            /** @type {?} */
            const outlet = this.document.createElement('div');
            outlet.id = 'ng-dropdown-outlet';
            this.document.body.insertBefore(outlet, this.document.body.firstChild);
        }
    }
}
AngularDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ng-dropdown,[ngDropdown],[ng-dropdown]',
                host: {
                    '[class.render-in-place]': 'renderInPlace',
                    '[class.ng-dropdown]': 'true'
                }
            },] }
];
AngularDropdownDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Attribute, args: ['id',] }] }
];
AngularDropdownDirective.propDecorators = {
    renderInPlace: [{ type: Input }],
    control: [{ type: ContentChild, args: [AngularDropdownControlDirective,] }],
    calculatePosition: [{ type: Input }],
    calculateInPlacePosition: [{ type: Input }],
    disabled: [{ type: Input }],
    beforeOpen: [{ type: Input }],
    beforeClose: [{ type: Input }],
    verticalPosition: [{ type: Input }],
    horizontalPosition: [{ type: Input }],
    onOpen: [{ type: Output, args: ['open',] }],
    onClose: [{ type: Output, args: ['close',] }],
    dropdownContent: [{ type: ContentChild, args: [forwardRef(() => AngularDropdownContentComponent),] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const MutationObserver = ((/** @type {?} */ (window))).MutationObserver;
class AngularDropdownContentComponent {
    /**
     * @param {?} dropdown
     * @param {?} zone
     * @param {?} document
     */
    constructor(dropdown, zone, document) {
        this.dropdown = dropdown;
        this.zone = zone;
        this.dropdownClass = '';
        this.overlay = false;
        this.hasMoved = false;
        this._animationClass = null;
        this.isTouchDevice = 'ontouchstart' in window;
        this.mutationObserver = null;
        this.destroy$ = new Subject();
        this.transitioningInClass = 'ng-dropdown-content--transitioning-in';
        this.transitionedInClass = 'ng-dropdown-content--transitioned-in';
        this.transitioningOutClass = 'ng-dropdown-content--transitioning-out';
        this.shouldOpen = false;
        this.repositionInZone = () => this.zone.run(() => this.dropdown.reposition());
        this.handleRootMouseDown = (e) => {
            const { target } = (/** @type {?} */ (e));
            if (this.hasMoved ||
                (this.dropdownElement !== null &&
                    this.dropdownElement.contains(target)) ||
                (this.triggerElement !== null && this.triggerElement.contains(target))) {
                this.hasMoved = false;
                return;
            }
            /** @type {?} */
            const closestDropdown = closest(target, 'ng-dropdown-content');
            if (closestDropdown !== null) {
                /** @type {?} */
                const trigger = this.document.querySelector(`[aria-controls=${closestDropdown.getAttribute('id')}]`);
                /** @type {?} */
                const parentDropdown = closest((/** @type {?} */ (trigger)), 'ng-dropdown-content');
                if (parentDropdown !== null &&
                    parentDropdown.getAttribute('id') === this.dropdown.dropdownId) {
                    this.hasMoved = false;
                    return;
                }
            }
            this.dropdown.close(true);
        };
        this.touchStartHandler = (e) => {
            this.document.body.addEventListener('touchmove', this.touchMoveHandler, true);
        };
        this.touchMoveHandler = (e) => {
            this.hasMoved = true;
            this.document.body.removeEventListener('touchmove', this.touchMoveHandler, true);
        };
        this.document = document;
    }
    /**
     * @return {?}
     */
    get dropdownElement() {
        return this.dropdown.dropdownElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dropdown.onOpen
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => (this.shouldOpen = true));
        this.dropdown.onClose
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.close());
    }
    /**
     * @param {?} className
     * @return {?}
     */
    set animationClass(className) {
        if (this.dropdownElement !== null) {
            if (this._animationClass && className !== this._animationClass) {
                this.dropdownElement.classList.remove(this._animationClass);
            }
            else if (className) {
                this.dropdownElement.classList.add(className);
            }
        }
        this._animationClass = className;
    }
    /**
     * @return {?}
     */
    get animationClass() {
        return this._animationClass;
    }
    /**
     * @return {?}
     */
    get triggerElement() {
        return this.dropdown.triggerElement;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.shouldOpen) {
            this.animationClass = this.transitioningInClass;
            requestAnimationFrame(() => this.open());
            this.shouldOpen = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.teardownEvents();
    }
    /**
     * @return {?}
     */
    open() {
        this.document.body.addEventListener('mousedown', this.handleRootMouseDown, true);
        if (this.isTouchDevice) {
            this.document.body.addEventListener('touchstart', this.touchStartHandler, true);
            this.document.body.addEventListener('touchend', this.handleRootMouseDown, true);
        }
        /** @type {?} */
        const changes = this.dropdown.reposition();
        if (!this.dropdown.renderInPlace) {
            this.addGlobalEvents();
            this.startObservingDomMutations();
        }
        else if (changes !== null && changes.vPosition === 'above') {
            this.startObservingDomMutations();
        }
        requestAnimationFrame(() => this.animateIn());
    }
    /**
     * @return {?}
     */
    close() {
        this.teardownEvents();
        this.animateOut();
    }
    /**
     * @return {?}
     */
    animateIn() {
        waitForAnimation(this.dropdownElement, () => {
            this.animationClass = this.transitionedInClass;
        });
    }
    /**
     * @return {?}
     */
    animateOut() {
        if (this.dropdownElement === null) {
            return;
        }
        /** @type {?} */
        const parentElement = this.dropdown.renderInPlace
            ? (/** @type {?} */ ((/** @type {?} */ (this.dropdownElement.parentElement)).parentElement))
            : (/** @type {?} */ (this.dropdownElement.parentElement));
        /** @type {?} */
        const clone = (/** @type {?} */ (this.dropdownElement.cloneNode(true)));
        clone.id = `${this.dropdownElement.id}--clone`;
        clone.classList.remove(this.transitionedInClass);
        clone.classList.remove(this.transitioningInClass);
        clone.classList.add(this.transitioningOutClass);
        parentElement.appendChild(clone);
        this.animationClass = this.transitioningInClass;
        waitForAnimation(clone, () => parentElement.removeChild(clone));
    }
    /**
     * @return {?}
     */
    startObservingDomMutations() {
        if (MutationObserver !== undefined) {
            this.mutationObserver = new MutationObserver((mutations) => {
                if (mutations[0].addedNodes.length ||
                    mutations[0].removedNodes.length) {
                    this.repositionInZone();
                }
            });
            (/** @type {?} */ (this.mutationObserver)).observe((/** @type {?} */ (this.dropdownElement)), {
                childList: true,
                subtree: true
            });
        }
        else {
            (/** @type {?} */ (this.dropdownElement)).addEventListener('DOMNodeInserted', this.repositionInZone, false);
            (/** @type {?} */ (this.dropdownElement)).addEventListener('DOMNodeRemoved', this.repositionInZone, false);
        }
    }
    /**
     * @return {?}
     */
    stopObservingDomMutations() {
        if (MutationObserver) {
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
                this.mutationObserver = null;
            }
        }
        else {
            if (this.dropdownElement !== null) {
                this.dropdownElement.removeEventListener('DOMNodeInserted', this.repositionInZone);
                this.dropdownElement.removeEventListener('DOMNodeRemoved', this.repositionInZone);
            }
        }
    }
    /**
     * @return {?}
     */
    addGlobalEvents() {
        window.addEventListener('scroll', this.repositionInZone);
        window.addEventListener('resize', this.repositionInZone);
        window.addEventListener('orientationchange', this.repositionInZone);
    }
    /**
     * @return {?}
     */
    removeGlobalEvents() {
        window.removeEventListener('scroll', this.repositionInZone);
        window.removeEventListener('resize', this.repositionInZone);
        window.removeEventListener('orientationchange', this.repositionInZone);
    }
    /**
     * @return {?}
     */
    teardownEvents() {
        this.removeGlobalEvents();
        this.stopObservingDomMutations();
        this.document.body.removeEventListener('mousedown', this.handleRootMouseDown, true);
        if (this.isTouchDevice) {
            this.document.body.removeEventListener('touchstart', this.touchStartHandler, true);
            this.document.body.removeEventListener('touchend', this.handleRootMouseDown, true);
        }
    }
}
AngularDropdownContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-dropdown-content,[ng-dropdown-content],[ngDropdownContent]',
                template: "<ng-container *ngIf=\"dropdown.isOpen$ | async as isOpen\">\n  <ng-container *ngWormhole=\"'#ng-dropdown-outlet'; renderInPlace: dropdown.renderInPlace\">\n    <div *ngIf=\"overlay && isOpen\" class=\"ng-dropdown-overlay\"></div>\n    <div [id]=\"dropdown.dropdownId\"\n        class=\"ng-dropdown-content {{dropdownClass}}\"\n        [style.top]=\"(dropdown.position$ | async)?.top\"\n        [style.right]=\"(dropdown.position$ | async)?.right\"\n        [style.bottom]=\"(dropdown.position$ | async)?.bottom\"\n        [style.left]=\"(dropdown.position$ | async)?.left\"\n        [class.render-in-place]=\"dropdown.renderInPlace\"\n        [class.ng-dropdown-content--above]=\"(dropdown.position$ | async)?.vPosition === 'above'\"\n        [class.ng-dropdown-content--below]=\"(dropdown.position$ | async)?.vPosition === 'below'\"\n        [class.ng-dropdown-content--right]=\"(dropdown.position$ | async)?.hPosition === 'right'\"\n        [class.ng-dropdown-content--center]=\"(dropdown.position$ | async)?.hPosition === 'center'\"\n        [class.ng-dropdown-content--left]=\"(dropdown.position$ | async)?.hPosition === 'left'\">\n      <ng-content></ng-content>\n    </div>\n  </ng-container>\n  <div *ngIf=\"!isOpen\" [id]=\"dropdown.dropdownId\" class=\"ng-dropdown-placeholder\"></div>\n</ng-container>\n",
                host: {
                    '[class.render-in-place]': 'dropdown.renderInPlace'
                },
                styles: [":host{display:none}:host.render-in-place{display:block;position:absolute}"]
            }] }
];
AngularDropdownContentComponent.ctorParameters = () => [
    { type: AngularDropdownDirective, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => AngularDropdownDirective),] }] },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
AngularDropdownContentComponent.propDecorators = {
    dropdownClass: [{ type: Input }],
    overlay: [{ type: Input }],
    transitioningInClass: [{ type: Input }],
    transitionedInClass: [{ type: Input }],
    transitioningOutClass: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AngularDropdownModule {
}
AngularDropdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgWormholeModule],
                declarations: [
                    AngularDropdownDirective,
                    AngularDropdownControlDirective,
                    AngularDropdownContentComponent
                ],
                exports: [
                    AngularDropdownDirective,
                    AngularDropdownControlDirective,
                    AngularDropdownContentComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { AngularDropdownContentComponent, AngularDropdownControlDirective, AngularDropdownDirective, AngularDropdownModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,