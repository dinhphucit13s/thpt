/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Observable, BehaviorSubject, of } from 'rxjs';
import { skip, first, filter } from 'rxjs/operators';
import { Directive, Attribute, Inject, Input, Output, ContentChild, forwardRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { AngularDropdownControlDirective } from './angular-dropdown-control.directive';
import { AngularDropdownContentComponent } from './angular-dropdown-content.component';
import { calculatePosition, calculateInPlacePosition } from './utils';
/**
 * @record
 */
export function AngularDropdownPositionChanges() { }
if (false) {
    /** @type {?} */
    AngularDropdownPositionChanges.prototype.vPosition;
    /** @type {?} */
    AngularDropdownPositionChanges.prototype.hPosition;
}
/** @type {?} */
let _id = 1;
/**
 * @return {?}
 */
function generateDropdownId() {
    return _id++;
}
/**
 * @record
 */
export function DropdownContentPosition() { }
if (false) {
    /** @type {?} */
    DropdownContentPosition.prototype.hPosition;
    /** @type {?} */
    DropdownContentPosition.prototype.vPosition;
    /** @type {?} */
    DropdownContentPosition.prototype.top;
    /** @type {?} */
    DropdownContentPosition.prototype.left;
    /** @type {?} */
    DropdownContentPosition.prototype.bottom;
    /** @type {?} */
    DropdownContentPosition.prototype.right;
}
/** @type {?} */
const EmptyDropdownContentPosition = Object.freeze({
    vPosition: null,
    hPosition: null,
    top: null,
    left: null,
    bottom: null,
    right: null
});
export class AngularDropdownDirective {
    /**
     * @param {?} document
     * @param {?=} id
     */
    constructor(document, id) {
        this.renderInPlace = false;
        this.control = null;
        this.previousVerticalPosition = null;
        this.previousHorizontalPosition = null;
        this.matchTriggerWidth = false;
        this._isOpen$ = new BehaviorSubject(false);
        this.isOpen$ = this._isOpen$.pipe(skip(1));
        this.position$ = new BehaviorSubject(EmptyDropdownContentPosition);
        this.calculatePosition = calculatePosition;
        this.calculateInPlacePosition = calculateInPlacePosition;
        this.disabled = false;
        this.beforeOpen = null;
        this.beforeClose = null;
        this.verticalPosition = 'auto';
        this.horizontalPosition = 'auto';
        this.onOpen = this.isOpen$.pipe(filter(open => open === true));
        this.onClose = this.isOpen$.pipe(filter(open => open === false));
        this.uniqueId = null;
        this.width = null;
        this.reposition = () => {
            if (!this._isOpen$.getValue()) {
                return null;
            }
            /** @type {?} */
            const dropdownElement = this.dropdownElement;
            if (!dropdownElement || !this.triggerElement) {
                return null;
            }
            /** @type {?} */
            const _calculatePosition = this.renderInPlace
                ? this.calculateInPlacePosition
                : this.calculatePosition;
            /** @type {?} */
            const options = {
                horizontalPosition: this.horizontalPosition,
                verticalPosition: this.verticalPosition,
                matchTriggerWidth: this.matchTriggerWidth,
                previousHorizontalPosition: this.previousHorizontalPosition,
                previousVerticalPosition: this.previousVerticalPosition
            };
            /** @type {?} */
            const positionData = _calculatePosition(this.triggerElement, dropdownElement, options);
            return this.applyReposition(this.triggerElement, dropdownElement, positionData);
        };
        this.document = document;
        this.initializeId(id);
        this.createDefaultWormholeOutlet();
    }
    /**
     * @return {?}
     */
    get dropdownId() {
        return `ng-dropdown-content-${this.uniqueId}`;
    }
    /**
     * @return {?}
     */
    get triggerElement() {
        return this.control && this.control.element.nativeElement;
    }
    /**
     * @return {?}
     */
    get dropdownElement() {
        return this.document.getElementById(this.dropdownId);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    ngOnChanges({ disabled }) {
        if (disabled &&
            disabled.firstChange === false &&
            disabled.currentValue === true &&
            disabled.previousValue !== true) {
            this.disable();
        }
    }
    /**
     * @return {?}
     */
    open() {
        if (this.disabled || this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        let open$ = of(true);
        if (this.beforeOpen) {
            /** @type {?} */
            const result = this.beforeOpen();
            open$ = result instanceof Observable ? result : of(result);
        }
        open$
            .pipe(first(), filter(open => open === true))
            .subscribe(() => this._isOpen$.next(true));
    }
    /**
     * @param {?=} skipFocus
     * @return {?}
     */
    close(skipFocus = false) {
        if (this.disabled || !this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        let close$ = of(true);
        if (this.beforeClose) {
            /** @type {?} */
            const result = this.beforeClose();
            close$ = result instanceof Observable ? result : of(result);
        }
        close$
            .pipe(first(), filter(close => close === true))
            .subscribe(() => {
            Object.assign(this, {
                hPosition: null,
                vPosition: null,
                top: null,
                right: null,
                bottom: null,
                left: null,
                width: null,
                previousVerticalPosition: null,
                previousHorizontalPosition: null
            });
            this._isOpen$.next(false);
            if (!skipFocus) {
                if (this.triggerElement instanceof HTMLElement &&
                    this.triggerElement.tabIndex > -1) {
                    this.triggerElement.focus();
                }
            }
        });
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this._isOpen$.getValue()) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    disable() {
        this.disabled = true;
        this.close();
    }
    /**
     * @return {?}
     */
    enable() {
        this.disabled = false;
    }
    /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} positions
     * @return {?}
     */
    applyReposition(trigger, dropdown, positions) {
        /** @type {?} */
        const changes = {
            hPosition: positions.horizontalPosition,
            vPosition: positions.verticalPosition
        };
        if (positions.style) {
            changes.top = `${positions.style.top}px`;
            // The component can be aligned from the right or from the left, but not from both.
            if (positions.style.left != null) {
                changes.left = `${positions.style.left}px`;
                changes.right = null;
            }
            else if (positions.style.right != null) {
                changes.right = `${positions.style.right}px`;
                changes.left = null;
            }
            if (positions.style.width != null) {
                changes.width = `${positions.style.width}px`;
            }
            if (this.position$.getValue().top == null) {
                // Bypass on the first reposition only to avoid flickering.
                Object.keys(positions.style).forEach(k => (dropdown.style[(/** @type {?} */ (k))] = positions.style[k]));
            }
        }
        this.position$.next(changes);
        this.previousHorizontalPosition = positions.horizontalPosition;
        this.previousVerticalPosition = positions.verticalPosition;
        return changes;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    initializeId(id) {
        if (id) {
            this.id = this.uniqueId = id;
        }
        else {
            this.uniqueId = generateDropdownId();
            this.id = `ng-dropdown-${this.uniqueId}`;
        }
    }
    /**
     * @return {?}
     */
    createDefaultWormholeOutlet() {
        if (!this.document.getElementById('ng-dropdown-outlet')) {
            /** @type {?} */
            const outlet = this.document.createElement('div');
            outlet.id = 'ng-dropdown-outlet';
            this.document.body.insertBefore(outlet, this.document.body.firstChild);
        }
    }
}
AngularDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ng-dropdown,[ngDropdown],[ng-dropdown]',
                host: {
                    '[class.render-in-place]': 'renderInPlace',
                    '[class.ng-dropdown]': 'true'
                }
            },] }
];
AngularDropdownDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Attribute, args: ['id',] }] }
];
AngularDropdownDirective.propDecorators = {
    renderInPlace: [{ type: Input }],
    control: [{ type: ContentChild, args: [AngularDropdownControlDirective,] }],
    calculatePosition: [{ type: Input }],
    calculateInPlacePosition: [{ type: Input }],
    disabled: [{ type: Input }],
    beforeOpen: [{ type: Input }],
    beforeClose: [{ type: Input }],
    verticalPosition: [{ type: Input }],
    horizontalPosition: [{ type: Input }],
    onOpen: [{ type: Output, args: ['open',] }],
    onClose: [{ type: Output, args: ['close',] }],
    dropdownContent: [{ type: ContentChild, args: [forwardRef(() => AngularDropdownContentComponent),] }]
};
if (false) {
    /** @type {?} */
    AngularDropdownDirective.prototype.id;
    /** @type {?} */
    AngularDropdownDirective.prototype.renderInPlace;
    /** @type {?} */
    AngularDropdownDirective.prototype.control;
    /** @type {?} */
    AngularDropdownDirective.prototype.previousVerticalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.previousHorizontalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.matchTriggerWidth;
    /** @type {?} */
    AngularDropdownDirective.prototype._isOpen$;
    /** @type {?} */
    AngularDropdownDirective.prototype.isOpen$;
    /** @type {?} */
    AngularDropdownDirective.prototype.position$;
    /** @type {?} */
    AngularDropdownDirective.prototype.calculatePosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.calculateInPlacePosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.disabled;
    /** @type {?} */
    AngularDropdownDirective.prototype.beforeOpen;
    /** @type {?} */
    AngularDropdownDirective.prototype.beforeClose;
    /** @type {?} */
    AngularDropdownDirective.prototype.verticalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.horizontalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.onOpen;
    /** @type {?} */
    AngularDropdownDirective.prototype.onClose;
    /** @type {?} */
    AngularDropdownDirective.prototype.dropdownContent;
    /** @type {?} */
    AngularDropdownDirective.prototype.uniqueId;
    /** @type {?} */
    AngularDropdownDirective.prototype.width;
    /** @type {?} */
    AngularDropdownDirective.prototype.document;
    /** @type {?} */
    AngularDropdownDirective.prototype.reposition;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1kcm9wZG93bi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWRyb3Bkb3duLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItZHJvcGRvd24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUVMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBSU4sWUFBWSxFQUtaLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdkYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLHdCQUF3QixFQUFFLE1BQU0sU0FBUyxDQUFDOzs7O0FBRXRFLG9EQUdDOzs7SUFGQyxtREFBNkI7O0lBQzdCLG1EQUF1Qzs7O0lBR3JDLEdBQUcsR0FBRyxDQUFDOzs7O0FBQ1g7SUFDRSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ2YsQ0FBQzs7OztBQUtELDZDQU9DOzs7SUFOQyw0Q0FBOEM7O0lBQzlDLDRDQUE0Qzs7SUFDNUMsc0NBQTRCOztJQUM1Qix1Q0FBNkI7O0lBQzdCLHlDQUErQjs7SUFDL0Isd0NBQThCOzs7TUFHMUIsNEJBQTRCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNqRCxTQUFTLEVBQUUsSUFBSTtJQUNmLFNBQVMsRUFBRSxJQUFJO0lBQ2YsR0FBRyxFQUFFLElBQUk7SUFDVCxJQUFJLEVBQUUs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akMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN4RTtJQUNILENBQUM7OztZQS9QRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdDQUF3QztnQkFDbEQsSUFBSSxFQUFFO29CQUNKLHlCQUF5QixFQUFFLGVBQWU7b0JBQzFDLHFCQUFxQixFQUFFLE1BQU07aUJBQzlCO2FBQ0Y7Ozs0Q0FpRWMsTUFBTSxTQUFDLFFBQVE7eUNBQWtCLFNBQVMsU0FBQyxJQUFJOzs7NEJBN0QzRCxLQUFLO3NCQUdMLFlBQVksU0FBQywrQkFBK0I7Z0NBa0I1QyxLQUFLO3VDQUVMLEtBQUs7dUJBR0wsS0FBSzt5QkFHTCxLQUFLOzBCQUdMLEtBQUs7K0JBR0wsS0FBSztpQ0FFTCxLQUFLO3FCQUdMLE1BQU0sU0FBQyxNQUFNO3NCQUdiLE1BQU0sU0FBQyxPQUFPOzhCQVdkLFlBQVksU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsK0JBQStCLENBQUM7Ozs7SUF4RC9ELHNDQUFZOztJQUVaLGlEQUNzQjs7SUFFdEIsMkNBQ3VEOztJQUV2RCw0REFBeUQ7O0lBQ3pELDhEQUE2RDs7SUFDN0QscURBQTBCOztJQUUxQiw0Q0FBOEM7O0lBQzlDLDJDQUFzQzs7SUFFdEMsNkNBRUU7O0lBTUYscURBQ2dEOztJQUNoRCw0REFDOEQ7O0lBRTlELDRDQUNpQjs7SUFFakIsOENBQ2dFOztJQUVoRSwrQ0FDaUU7O0lBRWpFLG9EQUNtRDs7SUFDbkQsc0RBQ3VEOztJQUV2RCwwQ0FDMEQ7O0lBRTFELDJDQUM0RDs7SUFVNUQsbURBQzBEOztJQUUxRCw0Q0FBZ0Q7O0lBQ2hELHlDQUFvQzs7SUFDcEMsNENBQTJCOztJQWtHM0IsOENBaUNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2tpcCwgZmlyc3QsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBEaXJlY3RpdmUsXG4gIEF0dHJpYnV0ZSxcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFbGVtZW50UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBPbkNoYW5nZXMsXG4gIENvbnRlbnRDaGlsZCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgRXZlbnRFbWl0dGVyLFxuICBRdWVyeUxpc3QsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIGZvcndhcmRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQW5ndWxhckRyb3Bkb3duQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vYW5ndWxhci1kcm9wZG93bi1jb250cm9sLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbmd1bGFyRHJvcGRvd25Db250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9hbmd1bGFyLWRyb3Bkb3duLWNvbnRlbnQuY29tcG9uZW50JztcblxuaW1wb3J0IHsgY2FsY3VsYXRlUG9zaXRpb24sIGNhbGN1bGF0ZUluUGxhY2VQb3NpdGlvbiB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJEcm9wZG93blBvc2l0aW9uQ2hhbmdlcyB7XG4gIHZQb3NpdGlvbjogJ2Fib3ZlJyB8ICdiZWxvdyc7XG4gIGhQb3NpdGlvbjogJ3JpZ2h0JyB8ICdjZW50ZXInIHwgJ2xlZnQnO1xufVxuXG5sZXQgX2lkID0gMTtcbmZ1bmN0aW9uIGdlbmVyYXRlRHJvcGRvd25JZCgpIHtcbiAgcmV0dXJuIF9pZCsrO1xufVxuXG5leHBvcnQgdHlwZSBWZXJ0aWNhbFBvc2l0aW9uID0gJ2F1dG8nIHwgJ2Fib3ZlJyB8ICdiZWxvdyc7XG5leHBvcnQgdHlwZSBIb3Jpem9udGFsUG9zaXRpb24gPSAnYXV0bycgfCAncmlnaHQnIHwgJ2NlbnRlcicgfCAnbGVmdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcGRvd25Db250ZW50UG9zaXRpb24ge1xuICByZWFkb25seSBoUG9zaXRpb246IEhvcml6b250YWxQb3NpdGlvbiB8IG51bGw7XG4gIHJlYWRvbmx5IHZQb3NpdGlvbjogVmVydGljYWxQb3NpdGlvbiB8IG51bGw7XG4gIHJlYWRvbmx5IHRvcDogc3RyaW5nIHwgbnVsbDtcbiAgcmVhZG9ubHkgbGVmdDogc3RyaW5nIHwgbnVsbDtcbiAgcmVhZG9ubHkgYm90dG9tOiBzdHJpbmcgfCBudWxsO1xuICByZWFkb25seSByaWdodDogc3RyaW5nIHwgbnVsbDtcbn1cblxuY29uc3QgRW1wdHlEcm9wZG93bkNvbnRlbnRQb3NpdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICB2UG9zaXRpb246IG51bGwsXG4gIGhQb3NpdGlvbjogbnVsbCxcbiAgdG9wOiBudWxsLFxuICBsZWZ0OiBudWxsLFxuICBib3R0b206IG51bGwsXG4gIHJpZ2h0OiBudWxsXG59KTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbmctZHJvcGRvd24sW25nRHJvcGRvd25dLFtuZy1kcm9wZG93bl0nLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5yZW5kZXItaW4tcGxhY2VdJzogJ3JlbmRlckluUGxhY2UnLFxuICAgICdbY2xhc3MubmctZHJvcGRvd25dJzogJ3RydWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckRyb3Bkb3duRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgaWQ/OiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcmVuZGVySW5QbGFjZSA9IGZhbHNlO1xuXG4gIEBDb250ZW50Q2hpbGQoQW5ndWxhckRyb3Bkb3duQ29udHJvbERpcmVjdGl2ZSlcbiAgY29udHJvbDogQW5ndWxhckRyb3Bkb3duQ29udHJvbERpcmVjdGl2ZSB8IG51bGwgPSBudWxsO1xuXG4gIHByZXZpb3VzVmVydGljYWxQb3NpdGlvbjogVmVydGljYWxQb3NpdGlvbiB8IG51bGwgPSBudWxsO1xuICBwcmV2aW91c0hvcml6b250YWxQb3NpdGlvbjogSG9yaXpvbnRhbFBvc2l0aW9uIHwgbnVsbCA9IG51bGw7XG4gIG1hdGNoVHJpZ2dlcldpZHRoID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfaXNPcGVuJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xuICBpc09wZW4kID0gdGhpcy5faXNPcGVuJC5waXBlKHNraXAoMSkpO1xuXG4gIHBvc2l0aW9uJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UmVhZG9ubHk8RHJvcGRvd25Db250ZW50UG9zaXRpb24+PihcbiAgICBFbXB0eURyb3Bkb3duQ29udGVudFBvc2l0aW9uXG4gICk7XG5cbiAgZ2V0IGRyb3Bkb3duSWQoKSB7XG4gICAgcmV0dXJuIGBuZy1kcm9wZG93bi1jb250ZW50LSR7dGhpcy51bmlxdWVJZH1gO1xuICB9XG5cbiAgQElucHV0KClcbiAgY2FsY3VsYXRlUG9zaXRpb246IEZ1bmN0aW9uID0gY2FsY3VsYXRlUG9zaXRpb247XG4gIEBJbnB1dCgpXG4gIGNhbGN1bGF0ZUluUGxhY2VQb3NpdGlvbjogRnVuY3Rpb24gPSBjYWxjdWxhdGVJblBsYWNlUG9zaXRpb247XG5cbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBiZWZvcmVPcGVuOiAoKCkgPT4gYm9vbGVhbiB8IE9ic2VydmFibGU8Ym9vbGVhbj4pIHwgbnVsbCA9IG51bGw7XG5cbiAgQElucHV0KClcbiAgYmVmb3JlQ2xvc2U6ICgoKSA9PiBib29sZWFuIHwgT2JzZXJ2YWJsZTxib29sZWFuPikgfCBudWxsID0gbnVsbDtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgdmVydGljYWxQb3NpdGlvbjogVmVydGljYWxQb3NpdGlvbiA9ICdhdXRvJztcbiAgQElucHV0KClcbiAgcHVibGljIGhvcml6b250YWxQb3NpdGlvbjogSG9yaXpvbnRhbFBvc2l0aW9uID0gJ2F1dG8nO1xuXG4gIEBPdXRwdXQoJ29wZW4nKVxuICBvbk9wZW4gPSB0aGlzLmlzT3BlbiQucGlwZShmaWx0ZXIob3BlbiA9PiBvcGVuID09PSB0cnVlKSk7XG5cbiAgQE91dHB1dCgnY2xvc2UnKVxuICBvbkNsb3NlID0gdGhpcy5pc09wZW4kLnBpcGUoZmlsdGVyKG9wZW4gPT4gb3BlbiA9PT0gZmFsc2UpKTtcblxuICBnZXQgdHJpZ2dlckVsZW1lbnQoKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sICYmIHRoaXMuY29udHJvbC5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBnZXQgZHJvcGRvd25FbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kcm9wZG93bklkKTtcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGQoZm9yd2FyZFJlZigoKSA9PiBBbmd1bGFyRHJvcGRvd25Db250ZW50Q29tcG9uZW50KSlcbiAgcHJpdmF0ZSBkcm9wZG93bkNvbnRlbnQ/OiBBbmd1bGFyRHJvcGRvd25Db250ZW50Q29tcG9uZW50O1xuXG4gIHByaXZhdGUgdW5pcXVlSWQ6IG51bWJlciB8IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHdpZHRoOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueSwgQEF0dHJpYnV0ZSgnaWQnKSBpZD86IHN0cmluZykge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICB0aGlzLmluaXRpYWxpemVJZChpZCk7XG4gICAgdGhpcy5jcmVhdGVEZWZhdWx0V29ybWhvbGVPdXRsZXQoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKHsgZGlzYWJsZWQgfTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIGRpc2FibGVkICYmXG4gICAgICBkaXNhYmxlZC5maXJzdENoYW5nZSA9PT0gZmFsc2UgJiZcbiAgICAgIGRpc2FibGVkLmN1cnJlbnRWYWx1ZSA9PT0gdHJ1ZSAmJlxuICAgICAgZGlzYWJsZWQucHJldmlvdXNWYWx1ZSAhPT0gdHJ1ZVxuICAgICkge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgb3BlbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLl9pc09wZW4kLmdldFZhbHVlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgb3BlbiQgPSBvZih0cnVlKTtcblxuICAgIGlmICh0aGlzLmJlZm9yZU9wZW4pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYmVmb3JlT3BlbigpO1xuICAgICAgb3BlbiQgPSByZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlID8gcmVzdWx0IDogb2YocmVzdWx0KTtcbiAgICB9XG5cbiAgICBvcGVuJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpcnN0KCksXG4gICAgICAgIGZpbHRlcihvcGVuID0+IG9wZW4gPT09IHRydWUpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuX2lzT3BlbiQubmV4dCh0cnVlKSk7XG4gIH1cblxuICBjbG9zZShza2lwRm9jdXMgPSBmYWxzZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICF0aGlzLl9pc09wZW4kLmdldFZhbHVlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgY2xvc2UkID0gb2YodHJ1ZSk7XG5cbiAgICBpZiAodGhpcy5iZWZvcmVDbG9zZSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5iZWZvcmVDbG9zZSgpO1xuICAgICAgY2xvc2UkID0gcmVzdWx0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSA/IHJlc3VsdCA6IG9mKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgY2xvc2UkXG4gICAgICAucGlwZShcbiAgICAgICAgZmlyc3QoKSxcbiAgICAgICAgZmlsdGVyKGNsb3NlID0+IGNsb3NlID09PSB0cnVlKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgICAgIGhQb3NpdGlvbjogbnVsbCxcbiAgICAgICAgICB2UG9zaXRpb246IG51bGwsXG4gICAgICAgICAgdG9wOiBudWxsLFxuICAgICAgICAgIHJpZ2h0OiBudWxsLFxuICAgICAgICAgIGJvdHRvbTogbnVsbCxcbiAgICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgIHByZXZpb3VzVmVydGljYWxQb3NpdGlvbjogbnVsbCxcbiAgICAgICAgICBwcmV2aW91c0hvcml6b250YWxQb3NpdGlvbjogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5faXNPcGVuJC5uZXh0KGZhbHNlKTtcblxuICAgICAgICBpZiAoIXNraXBGb2N1cykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJlxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRWxlbWVudC50YWJJbmRleCA+IC0xXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHRvZ2dsZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5faXNPcGVuJC5nZXRWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfVxuXG4gIGRpc2FibGUoKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgZW5hYmxlKCk6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHJlcG9zaXRpb24gPSAoKTogQW5ndWxhckRyb3Bkb3duUG9zaXRpb25DaGFuZ2VzIHwgbnVsbCA9PiB7XG4gICAgaWYgKCF0aGlzLl9pc09wZW4kLmdldFZhbHVlKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGRyb3Bkb3duRWxlbWVudCA9IHRoaXMuZHJvcGRvd25FbGVtZW50O1xuICAgIGlmICghZHJvcGRvd25FbGVtZW50IHx8ICF0aGlzLnRyaWdnZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBfY2FsY3VsYXRlUG9zaXRpb24gPSB0aGlzLnJlbmRlckluUGxhY2VcbiAgICAgID8gdGhpcy5jYWxjdWxhdGVJblBsYWNlUG9zaXRpb25cbiAgICAgIDogdGhpcy5jYWxjdWxhdGVQb3NpdGlvbjtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBob3Jpem9udGFsUG9zaXRpb246IHRoaXMuaG9yaXpvbnRhbFBvc2l0aW9uLFxuICAgICAgdmVydGljYWxQb3NpdGlvbjogdGhpcy52ZXJ0aWNhbFBvc2l0aW9uLFxuICAgICAgbWF0Y2hUcmlnZ2VyV2lkdGg6IHRoaXMubWF0Y2hUcmlnZ2VyV2lkdGgsXG4gICAgICBwcmV2aW91c0hvcml6b250YWxQb3NpdGlvbjogdGhpcy5wcmV2aW91c0hvcml6b250YWxQb3NpdGlvbixcbiAgICAgIHByZXZpb3VzVmVydGljYWxQb3NpdGlvbjogdGhpcy5wcmV2aW91c1ZlcnRpY2FsUG9zaXRpb25cbiAgICB9O1xuXG4gICAgY29uc3QgcG9zaXRpb25EYXRhID0gX2NhbGN1bGF0ZVBvc2l0aW9uKFxuICAgICAgdGhpcy50cmlnZ2VyRWxlbWVudCxcbiAgICAgIGRyb3Bkb3duRWxlbWVudCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBwbHlSZXBvc2l0aW9uKFxuICAgICAgdGhpcy50cmlnZ2VyRWxlbWVudCxcbiAgICAgIGRyb3Bkb3duRWxlbWVudCxcbiAgICAgIHBvc2l0aW9uRGF0YVxuICAgICk7XG4gIH07XG5cbiAgcHJpdmF0ZSBhcHBseVJlcG9zaXRpb24oXG4gICAgdHJpZ2dlcjogRWxlbWVudCxcbiAgICBkcm9wZG93bjogSFRNTEVsZW1lbnQsXG4gICAgcG9zaXRpb25zOiBhbnlcbiAgKTogQW5ndWxhckRyb3Bkb3duUG9zaXRpb25DaGFuZ2VzIHtcbiAgICBjb25zdCBjaGFuZ2VzOiBhbnkgPSB7XG4gICAgICBoUG9zaXRpb246IHBvc2l0aW9ucy5ob3Jpem9udGFsUG9zaXRpb24sXG4gICAgICB2UG9zaXRpb246IHBvc2l0aW9ucy52ZXJ0aWNhbFBvc2l0aW9uXG4gICAgfTtcbiAgICBpZiAocG9zaXRpb25zLnN0eWxlKSB7XG4gICAgICBjaGFuZ2VzLnRvcCA9IGAke3Bvc2l0aW9ucy5zdHlsZS50b3B9cHhgO1xuICAgICAgLy8gVGhlIGNvbXBvbmVudCBjYW4gYmUgYWxpZ25lZCBmcm9tIHRoZSByaWdodCBvciBmcm9tIHRoZSBsZWZ0LCBidXQgbm90IGZyb20gYm90aC5cbiAgICAgIGlmIChwb3NpdGlvbnMuc3R5bGUubGVmdCAhPSBudWxsKSB7XG4gICAgICAgIGNoYW5nZXMubGVmdCA9IGAke3Bvc2l0aW9ucy5zdHlsZS5sZWZ0fXB4YDtcbiAgICAgICAgY2hhbmdlcy5yaWdodCA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9ucy5zdHlsZS5yaWdodCAhPSBudWxsKSB7XG4gICAgICAgIGNoYW5nZXMucmlnaHQgPSBgJHtwb3NpdGlvbnMuc3R5bGUucmlnaHR9cHhgO1xuICAgICAgICBjaGFuZ2VzLmxlZnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHBvc2l0aW9ucy5zdHlsZS53aWR0aCAhPSBudWxsKSB7XG4gICAgICAgIGNoYW5nZXMud2lkdGggPSBgJHtwb3NpdGlvbnMuc3R5bGUud2lkdGh9cHhgO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucG9zaXRpb24kLmdldFZhbHVlKCkudG9wID09IG51bGwpIHtcbiAgICAgICAgLy8gQnlwYXNzIG9uIHRoZSBmaXJzdCByZXBvc2l0aW9uIG9ubHkgdG8gYXZvaWQgZmxpY2tlcmluZy5cbiAgICAgICAgT2JqZWN0LmtleXMocG9zaXRpb25zLnN0eWxlKS5mb3JFYWNoKFxuICAgICAgICAgIGsgPT4gKGRyb3Bkb3duLnN0eWxlW2sgYXMgYW55XSA9IHBvc2l0aW9ucy5zdHlsZVtrXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBvc2l0aW9uJC5uZXh0KGNoYW5nZXMpO1xuXG4gICAgdGhpcy5wcmV2aW91c0hvcml6b250YWxQb3NpdGlvbiA9IHBvc2l0aW9ucy5ob3Jpem9udGFsUG9zaXRpb247XG4gICAgdGhpcy5wcmV2aW91c1ZlcnRpY2FsUG9zaXRpb24gPSBwb3NpdGlvbnMudmVydGljYWxQb3NpdGlvbjtcblxuICAgIHJldHVybiBjaGFuZ2VzO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplSWQoaWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRoaXMuaWQgPSB0aGlzLnVuaXF1ZUlkID0gaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudW5pcXVlSWQgPSBnZW5lcmF0ZURyb3Bkb3duSWQoKTtcbiAgICAgIHRoaXMuaWQgPSBgbmctZHJvcGRvd24tJHt0aGlzLnVuaXF1ZUlkfWA7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVEZWZhdWx0V29ybWhvbGVPdXRsZXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZy1kcm9wZG93bi1vdXRsZXQnKSkge1xuICAgICAgY29uc3Qgb3V0bGV0ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG91dGxldC5pZCA9ICduZy1kcm9wZG93bi1vdXRsZXQnO1xuICAgICAgdGhpcy5kb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShvdXRsZXQsIHRoaXMuZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==