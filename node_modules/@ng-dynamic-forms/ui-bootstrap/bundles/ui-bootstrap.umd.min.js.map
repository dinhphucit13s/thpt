{"version":3,"file":"ui-bootstrap.umd.min.js","sources":["../../../es5/ui-bootstrap/src/checkbox/dynamic-bootstrap-checkbox.component.ts","../../../es5/ui-bootstrap/src/datepicker/dynamic-bootstrap-datepicker.component.ts","../../../es5/ui-bootstrap/src/form-array/dynamic-bootstrap-form-array.component.ts","../../../es5/ui-bootstrap/src/form-group/dynamic-bootstrap-form-group.component.ts","../../../es5/ui-bootstrap/src/input/dynamic-bootstrap-input.component.ts","../../../es5/ui-bootstrap/src/radio-group/dynamic-bootstrap-radio-group.component.ts","../../../es5/ui-bootstrap/src/rating/dynamic-bootstrap-rating.component.ts","../../../es5/ui-bootstrap/src/select/dynamic-bootstrap-select.component.ts","../../../es5/ui-bootstrap/src/textarea/dynamic-bootstrap-textarea.component.ts","../../../es5/ui-bootstrap/src/timepicker/dynamic-bootstrap-timepicker.component.ts","../../../es5/ui-bootstrap/src/dynamic-bootstrap-form-control-container.component.ts","../../../es5/ui-bootstrap/src/dynamic-bootstrap-form.component.ts","../../../../node_modules/ngx-bootstrap/rating/fesm5/ng:/ngx-bootstrap/rating/rating.component.ts","../../../../node_modules/ngx-bootstrap/rating/fesm5/ng:/ngx-bootstrap/rating/rating.module.ts","../../../es5/ui-bootstrap/src/dynamic-bootstrap-form-ui.module.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicCheckboxModel,\n    DynamicFormControlComponent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-checkbox\",\n    templateUrl: \"./dynamic-bootstrap-checkbox.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapCheckboxComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicCheckboxModel;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { BsDatepickerDirective } from \"ngx-bootstrap/datepicker\";\nimport {\n    DynamicDatePickerModel,\n    DynamicFormControlComponent,\n    DynamicFormControlCustomEvent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-datepicker\",\n    templateUrl: \"./dynamic-bootstrap-datepicker.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapDatePickerComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicDatePickerModel;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() customEvent: EventEmitter<DynamicFormControlCustomEvent> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild(BsDatepickerDirective) bsDatePicker: BsDatepickerDirective;\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}\n","import { Component, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormArrayComponent,\n    DynamicFormArrayModel,\n    DynamicFormControlCustomEvent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTemplateDirective\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-form-array\",\n    templateUrl: \"./dynamic-bootstrap-form-array.component.html\"\n})\nexport class DynamicBootstrapFormArrayComponent extends DynamicFormArrayComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicFormArrayModel;\n    @Input() templates: QueryList<DynamicTemplateDirective> | undefined;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() customEvent: EventEmitter<DynamicFormControlCustomEvent> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { Component, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormControlComponent,\n    DynamicFormControlCustomEvent,\n    DynamicFormGroupModel,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTemplateDirective\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-form-group\",\n    templateUrl: \"./dynamic-bootstrap-form-group.component.html\"\n})\nexport class DynamicBootstrapFormGroupComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicFormGroupModel;\n    @Input() templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() customEvent: EventEmitter<DynamicFormControlCustomEvent> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormControlComponent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicInputModel\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-input\",\n    templateUrl: \"./dynamic-bootstrap-input.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapInputComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicInputModel;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormControlComponent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicRadioGroupModel\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-radio-group\",\n    templateUrl: \"./dynamic-bootstrap-radio-group.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapRadioGroupComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicRadioGroupModel<string>;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicFormControlComponent,\n    DynamicRatingModel\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-rating\",\n    templateUrl: \"./dynamic-bootstrap-rating.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapRatingComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicRatingModel;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormControlComponent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicSelectModel\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-select\",\n    templateUrl: \"./dynamic-bootstrap-select.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapSelectComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicSelectModel<string>;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormControlComponent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTextAreaModel\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-textarea\",\n    templateUrl: \"./dynamic-bootstrap-textarea.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapTextAreaComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicTextAreaModel;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { TimepickerComponent } from \"ngx-bootstrap/timepicker\";\nimport {\n    DynamicFormControlComponent,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTimePickerModel\n} from \"@ng-dynamic-forms/core\";\n\n@Component({\n    selector: \"dynamic-bootstrap-timepicker\",\n    templateUrl: \"./dynamic-bootstrap-timepicker.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicBootstrapTimePickerComponent extends DynamicFormControlComponent {\n\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicTimePickerModel;\n\n    @Output() blur: EventEmitter<any> = new EventEmitter();\n    @Output() change: EventEmitter<any> = new EventEmitter();\n    @Output() focus: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild(TimepickerComponent) bsTimePicker: TimepickerComponent;\n\n    constructor(protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(layoutService, validationService);\n    }\n}\n","import {\n    Component,\n    ComponentFactoryResolver,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    Output,\n    QueryList,\n    Type,\n    ViewChild,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX,\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DYNAMIC_FORM_CONTROL_TYPE_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_RATING,\n    DYNAMIC_FORM_CONTROL_TYPE_SELECT,\n    DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA,\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n    DynamicFormArrayGroupModel,\n    DynamicFormControl,\n    DynamicFormControlContainerComponent,\n    DynamicFormControlEvent,\n    DynamicFormControlModel,\n    DynamicFormInstancesService,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTemplateDirective\n} from \"@ng-dynamic-forms/core\";\nimport { DynamicBootstrapCheckboxComponent } from \"./checkbox/dynamic-bootstrap-checkbox.component\";\nimport { DynamicBootstrapDatePickerComponent } from \"./datepicker/dynamic-bootstrap-datepicker.component\";\nimport { DynamicBootstrapFormArrayComponent } from \"./form-array/dynamic-bootstrap-form-array.component\";\nimport { DynamicBootstrapFormGroupComponent } from \"./form-group/dynamic-bootstrap-form-group.component\";\nimport { DynamicBootstrapInputComponent } from \"./input/dynamic-bootstrap-input.component\";\nimport { DynamicBootstrapRadioGroupComponent } from \"./radio-group/dynamic-bootstrap-radio-group.component\";\nimport { DynamicBootstrapRatingComponent } from \"./rating/dynamic-bootstrap-rating.component\";\nimport { DynamicBootstrapSelectComponent } from \"./select/dynamic-bootstrap-select.component\";\nimport { DynamicBootstrapTextAreaComponent } from \"./textarea/dynamic-bootstrap-textarea.component\";\nimport { DynamicBootstrapTimePickerComponent } from \"./timepicker/dynamic-bootstrap-timepicker.component\";\n\n@Component({\n    selector: \"dynamic-bootstrap-form-control\",\n    templateUrl: \"./dynamic-bootstrap-form-control-container.component.html\"\n})\nexport class DynamicBootstrapFormControlContainerComponent extends DynamicFormControlContainerComponent {\n\n    @ContentChildren(DynamicTemplateDirective) contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n    @Input(\"templates\") inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n\n    @Input() asBootstrapFormGroup: boolean = true;\n    @Input() context: DynamicFormArrayGroupModel | null = null;\n    @Input() group: FormGroup;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicFormControlModel;\n\n    @Output() blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output() change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output() focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"bsEvent\") customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n    @ViewChild(\"componentViewContainer\", {read: ViewContainerRef}) componentViewContainerRef: ViewContainerRef;\n\n    get componentType(): Type<DynamicFormControl> | null {\n        return this.layoutService.getCustomComponentType(this.model) || bootstrapUIFormControlMapFn(this.model);\n    }\n\n    constructor(protected componentFactoryResolver: ComponentFactoryResolver,\n                protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService,\n                protected dynamicFormInstancesService: DynamicFormInstancesService) {\n\n        super(componentFactoryResolver, layoutService, validationService, dynamicFormInstancesService);\n    }\n}\n\nexport function bootstrapUIFormControlMapFn(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n\n    switch (model.type) {\n\n        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n            return DynamicBootstrapFormArrayComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n            return DynamicBootstrapCheckboxComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n            return DynamicBootstrapFormGroupComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n            return DynamicBootstrapDatePickerComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n            return DynamicBootstrapFormGroupComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n            return DynamicBootstrapInputComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n            return DynamicBootstrapRadioGroupComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n            return DynamicBootstrapRatingComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n            return DynamicBootstrapSelectComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n            return DynamicBootstrapTextAreaComponent;\n\n        case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n            return DynamicBootstrapTimePickerComponent;\n\n        default:\n            return null;\n    }\n}\n","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewChildren } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormComponent,\n    DynamicFormControlEvent,\n    DynamicFormModel,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormService,\n    DynamicTemplateDirective,\n} from \"@ng-dynamic-forms/core\";\nimport { DynamicBootstrapFormControlContainerComponent } from \"./dynamic-bootstrap-form-control-container.component\";\n\n@Component({\n    selector: \"dynamic-bootstrap-form\",\n    templateUrl: \"./dynamic-bootstrap-form.component.html\"\n})\nexport class DynamicBootstrapFormComponent extends DynamicFormComponent {\n\n    @Input(\"group\") formGroup: FormGroup;\n    @Input(\"model\") formModel: DynamicFormModel;\n    @Input(\"layout\") formLayout: DynamicFormLayout;\n\n    @Output() blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output() change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output() focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"bsEvent\") customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n    @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n    @ViewChildren(DynamicBootstrapFormControlContainerComponent) components: QueryList<DynamicBootstrapFormControlContainerComponent>;\n\n    constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {\n        super(formService, layoutService);\n    }\n}","import {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  forwardRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AccessorContent, RatingResults } from './models';\n\nexport const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => RatingComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'rating',\n  templateUrl: './rating.component.html',\n  providers: [RATING_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RatingComponent implements ControlValueAccessor, OnInit {\n  /** number of icons */\n  @Input() max = 5;\n  /** if true will not react on any user events */\n  @Input() readonly: boolean;\n  /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\n  @Input() titles: string[];\n  /** custom template for icons */\n  // tslint:disable-next-line:no-any\n  @Input() customTemplate: TemplateRef<any>;\n  /** fired when icon selected, $event:number equals to selected rating */\n  @Output() onHover: EventEmitter<number> = new EventEmitter();\n  /** fired when icon selected, $event:number equals to previous rating value */\n  @Output() onLeave: EventEmitter<number> = new EventEmitter();\n\n  // tslint:disable-next-line:no-any\n  onChange: any = Function.prototype;\n  // tslint:disable-next-line:no-any\n  onTouched: any = Function.prototype;\n\n  range: RatingResults[];\n  value: number;\n  protected preValue: number;\n\n  constructor(private changeDetection: ChangeDetectorRef) {}\n\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: KeyboardEvent): void {\n    /* tslint:disable-next-line: deprecation */\n    if ([37, 38, 39, 40].indexOf(event.which) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    /* tslint:disable-next-line: deprecation */\n    const sign = event.which === 38 || event.which === 39 ? 1 : -1;\n    this.rate(this.value + sign);\n  }\n\n  ngOnInit(): void {\n    this.max = typeof this.max !== 'undefined' ? this.max : 5;\n    this.titles =\n      typeof this.titles !== 'undefined' && this.titles.length > 0\n        ? this.titles\n        : [];\n    this.range = this.buildTemplateObjects(this.max);\n  }\n\n  // model -> view\n  writeValue(value: number): void {\n    if (value % 1 !== value) {\n      this.value = Math.round(value);\n      this.preValue = value;\n      this.changeDetection.markForCheck();\n\n      return;\n    }\n\n    this.preValue = value;\n    this.value = value;\n    this.changeDetection.markForCheck();\n  }\n\n  enter(value: number): void {\n    if (!this.readonly) {\n      this.value = value;\n      this.changeDetection.markForCheck();\n      this.onHover.emit(value);\n    }\n  }\n\n  reset(): void {\n    this.value = this.preValue;\n    this.changeDetection.markForCheck();\n    this.onLeave.emit(this.value);\n  }\n\n  registerOnChange(fn: (_: number) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  rate(value: number): void {\n    if (!this.readonly && value >= 0 && value <= this.range.length) {\n      this.writeValue(value);\n      this.onChange(value);\n    }\n  }\n\n  protected buildTemplateObjects(max: number): RatingResults[] {\n    const result: RatingResults[] = [];\n    for (let i = 0; i < max; i++) {\n      result.push({\n          index: i,\n          title: this.titles[i] || i + 1\n        });\n    }\n\n    return result;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [RatingComponent],\n  exports: [RatingComponent]\n})\nexport class RatingModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RatingModule,\n      providers: []\n    };\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { BsDatepickerModule } from \"ngx-bootstrap/datepicker\";\nimport { RatingModule } from \"ngx-bootstrap/rating\";\nimport { TimepickerModule } from \"ngx-bootstrap/timepicker\";\nimport { TextMaskModule } from \"angular2-text-mask\";\nimport { DynamicFormsCoreModule } from \"@ng-dynamic-forms/core\";\nimport { DynamicBootstrapFormControlContainerComponent } from \"./dynamic-bootstrap-form-control-container.component\";\nimport { DynamicBootstrapFormComponent } from \"./dynamic-bootstrap-form.component\";\nimport { DynamicBootstrapCheckboxComponent } from \"./checkbox/dynamic-bootstrap-checkbox.component\";\nimport { DynamicBootstrapDatePickerComponent } from \"./datepicker/dynamic-bootstrap-datepicker.component\";\nimport { DynamicBootstrapFormArrayComponent } from \"./form-array/dynamic-bootstrap-form-array.component\";\nimport { DynamicBootstrapFormGroupComponent } from \"./form-group/dynamic-bootstrap-form-group.component\";\nimport { DynamicBootstrapInputComponent } from \"./input/dynamic-bootstrap-input.component\";\nimport { DynamicBootstrapRadioGroupComponent } from \"./radio-group/dynamic-bootstrap-radio-group.component\";\nimport { DynamicBootstrapRatingComponent } from \"./rating/dynamic-bootstrap-rating.component\";\nimport { DynamicBootstrapSelectComponent } from \"./select/dynamic-bootstrap-select.component\";\nimport { DynamicBootstrapTextAreaComponent } from \"./textarea/dynamic-bootstrap-textarea.component\";\nimport { DynamicBootstrapTimePickerComponent } from \"./timepicker/dynamic-bootstrap-timepicker.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        BsDatepickerModule,\n        RatingModule,\n        TimepickerModule,\n        TextMaskModule,\n        DynamicFormsCoreModule\n    ],\n    declarations: [\n        DynamicBootstrapCheckboxComponent,\n        DynamicBootstrapDatePickerComponent,\n        DynamicBootstrapFormArrayComponent,\n        DynamicBootstrapFormComponent,\n        DynamicBootstrapFormControlContainerComponent,\n        DynamicBootstrapFormGroupComponent,\n        DynamicBootstrapInputComponent,\n        DynamicBootstrapRadioGroupComponent,\n        DynamicBootstrapRatingComponent,\n        DynamicBootstrapSelectComponent,\n        DynamicBootstrapTextAreaComponent,\n        DynamicBootstrapTimePickerComponent\n    ],\n    entryComponents: [\n        DynamicBootstrapCheckboxComponent,\n        DynamicBootstrapDatePickerComponent,\n        DynamicBootstrapFormArrayComponent,\n        DynamicBootstrapFormGroupComponent,\n        DynamicBootstrapInputComponent,\n        DynamicBootstrapRadioGroupComponent,\n        DynamicBootstrapRatingComponent,\n        DynamicBootstrapSelectComponent,\n        DynamicBootstrapTextAreaComponent,\n        DynamicBootstrapTimePickerComponent\n    ],\n    exports: [\n        DynamicFormsCoreModule,\n        DynamicBootstrapCheckboxComponent,\n        DynamicBootstrapDatePickerComponent,\n        DynamicBootstrapFormArrayComponent,\n        DynamicBootstrapFormComponent,\n        DynamicBootstrapFormControlContainerComponent,\n        DynamicBootstrapFormGroupComponent,\n        DynamicBootstrapInputComponent,\n        DynamicBootstrapRadioGroupComponent,\n        DynamicBootstrapRatingComponent,\n        DynamicBootstrapSelectComponent,\n        DynamicBootstrapTextAreaComponent,\n        DynamicBootstrapTimePickerComponent\n    ]\n})\nexport class DynamicFormsBootstrapUIModule {\n}\n"],"names":["layoutService","validationService","_super","_this","EventEmitter","__extends","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","DynamicFormLayoutService","DynamicFormValidationService","Input","Output","DynamicFormControlComponent","ViewChild","BsDatepickerDirective","DynamicFormArrayComponent","TimepickerComponent","componentFactoryResolver","dynamicFormInstancesService","Object","DynamicBootstrapFormControlContainerComponent","this","getCustomComponentType","model","bootstrapUIFormControlMapFn","ComponentFactoryResolver","DynamicFormInstancesService","ContentChildren","DynamicTemplateDirective","read","ViewContainerRef","DynamicFormControlContainerComponent","type","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","DynamicBootstrapFormArrayComponent","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","DynamicBootstrapCheckboxComponent","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DynamicBootstrapFormGroupComponent","DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER","DynamicBootstrapDatePickerComponent","DYNAMIC_FORM_CONTROL_TYPE_GROUP","DYNAMIC_FORM_CONTROL_TYPE_INPUT","DynamicBootstrapInputComponent","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","DynamicBootstrapRadioGroupComponent","DYNAMIC_FORM_CONTROL_TYPE_RATING","DynamicBootstrapRatingComponent","DYNAMIC_FORM_CONTROL_TYPE_SELECT","DynamicBootstrapSelectComponent","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","DynamicBootstrapTextAreaComponent","DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER","DynamicBootstrapTimePickerComponent","formService","DynamicFormService","ViewChildren","DynamicFormComponent","RATING_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RatingComponent","multi","Function","prototype","event","indexOf","which","preventDefault","stopPropagation","sign","rate","value","max","titles","length","range","buildTemplateObjects","Math","round","preValue","markForCheck","readonly","onHover","emit","onLeave","fn","onChange","onTouched","writeValue","result","i","push","index","title","providers","ChangeDetectorRef","HostListener","RatingModule","ngModule","NgModule","imports","CommonModule","declarations","exports","ReactiveFormsModule","BsDatepickerModule","TimepickerModule","TextMaskModule","DynamicFormsCoreModule","DynamicBootstrapFormComponent","entryComponents"],"mappings":"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"}